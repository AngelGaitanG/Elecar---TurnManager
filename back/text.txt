1. npm install typeorm --save
2. npm install reflect-metadata --save

3. importar en el index.ts: import "reflect-metadata"

4. npm install pg --save

5. buscamos y configuramos en tsconfig.son lo siguiente:

	"emitDecoratorMetadata": true.
	"experimentalDecorators": true.
	"lib": ["ES6"].
	"strictPropertyInitialization": false.

6. Crear un modulo data-source.ts en la carpeta config

	import { DataSource } from "typreorm"
	
	export const AppDataSource = new DataSource({
	type: "postgres",
	host: "localhost",
	port: 5432,
	username: "test", -> cambiar a nuestro username
	password: "test", -> "       "       " password 
	database: "test", -> indicar una base de datos
	synchronize: true,
	logging: true,
	entities: [],
	subscribers: [],
	migrations: [],
	});

7. En nuestro archivo index.ts principal tenemos que reconfigurar
   lo siguiente: 

	import { AppDataSource } from "./config/data-source"
	
	AppDataSource.initialize()
	.then(res => {
	console.log("Conexion a la base de datos realizada con exito")
	server.listen(PORT, () => {
	      console.log("Server listening on PORT ${PORT}")
	})
	})

8. Creamos una carpeta entities dentro de la carpeta src
	
	Creamos un modulo User.ts

	import {Column, Entity, PrimaryGeneratedColumn} from "typeorm"
	
	@Entity({
	   name: "users"
	})
	export class User{
	@PrimaryGeneratedColumn()
	id: number

	@Column({
	  length:100
	})
	name: string
	
	@Column()
	email: string
	
	@Column("integer")
	age: number
	
	@Column()
	active: boolean
	}

9. Agregamos la entidad que acabamos de crear en la archivo data-source.ts
   en la propiedad entities.

10. Cambiamos nuestro servicio de usuario getUsersService:
	
	export const getUsersService = async() => {
		const users = await get AppDataSource.getRepository(User).find();
		return users;
	}

20. En data-source podemos crear un atajo para lo de arriba
	
	export const UserModel = AppDataSource.getRepository(User)
	
	entonces en podemos hacer ->
	
	const users = await UserModel.loQueNecesitemos()

21. Cambiamos nuestro servicio de createUserService:

	const user = await UserModel.create(userData);
	const result = await UserModel.save(user);
	return user;

22. Creamos la configuracion para obtener un usuario por ID.

	Enrutador -> router.get("/users/:id", getUserById)

	Controlador -> getUserById = () => {
		const {id} = req.params
		const user: IUser | null = await getUserbyIdService(Number(id))
		res.status(200).json(user);
	}  

	Servicio -> (id: number) => {
		const user = await UserModel.findOneBy({id})
	}
 
23. Podemos cambiar el tipo IUser de cada constante por la entidad User.

2. Relacionamos nuestra entidad Usuario con Vehicle
	@OneToOne(() => Vehicle)
	@JoinColumn()
	vehicle: Vehicle